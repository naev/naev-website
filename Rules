#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# ignore everything starting with underscore
ignore '/**/_*'

preprocess do
   # discard drafts FIRST (since they might affect other generated items)
    unless @config[:publish_drafts]
     @items.delete_if { |item| item[:draft] == true || item[:publish] == false }
   end
 
   @items.find_all('/blarg/*.md').each do |b|
      created_at = Time.parse(File.basename(b.identifier.without_ext).split('_')[0])
      b[:created_at] = created_at
      b[:created_at_s] = created_at.strftime("#{created_at.day.ordinalize} of %m, %y")
      b[:kind] = 'article'
   end

   # pagination
   # http://stackoverflow.com/a/503201/3274401
   2.upto((articles.length - 1) / @config[:pagination] + 1) do |page_id|
      @items.create( "<%= render 'partials/paginate', :page_id => #{page_id} %>", {:title => "Page #{page_id}", :extension => 'html'}, "/page/#{page_id}")
      end
end

# some special files
compile '/sitemap.xml' do
   filter :erb
   write '/sitemap.xml'
end
compile '/robots.txt' do
   filter :erb
   write '/robots.txt'
end
compile '/feed.rb' do
   filter :erb
   write '/feed/index.xml'
end

# favoicon
[16, 32, 64, 128, 180, 196].each do |s|
   compile '/favicon.png', rep: "s#{s.to_s}" do
      filter :thumbnailize, :width => s, :height => s
      write "/favicon-#{s.to_s}.png"
   end
end
compile '/favicon.png', rep: :ico do
   filter :thumbnailize, :width => 48, :height => 48, :filetype => 'ico'
   write '/favicon.ico'
end

compile '/**/*.md' do
  if item['hidden'].nil? 
    filter :erb

    # Markdown
    filter :kramdown

    # Standard procesing 
    layout '/default.html'
    filter :relativize_paths, :type => :css
    filter :relativize_paths, :type => :html
    filter :tidy

    basename = (item.identifier=='/index.md') ? '' : item.identifier.without_ext
    write basename+'/index.html'
  end
end

# Javascript and friends
compile '/**/*.js' do
   filter :concat_js
   filter :uglify_js, :comments => :none
   write ext: 'js'
end

# CSS and friends
compile '**/*.{css,scss}' do
   filter :erb
   filter :sass, syntax: :scss if item[:extension] == 'scss'
   filter :rainpress
   write ext: 'css'
end

# Other objects

compile '/page/*' do
   # Standard procesing 
   layout '/default.html'
   write item.identifier + '/index.html'
end

compile '/**/*' do
   write item.identifier.to_s
end

layout '/**/*', :erb

